module key_sch (input [64:1] in_key, output reg [48:1] key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, key16);
   //initial key permutation PC-1 which converts 64 bit key to 56 bit key
   function [56:1] pc1(input [64:1] in_key);
    begin
        pc1[56:1]={in_key[4], in_key[12], in_key[20], in_key[28], in_key[5], in_key[13], in_key[21],in_key[29],
        in_key[37], in_key[45], in_key[53], in_key[61], in_key[6], in_key[14], in_key[22],in_key[30],
        in_key[38], in_key[46], in_key[54], in_key[62], in_key[7], in_key[15], in_key[23],in_key[31],
        in_key[39], in_key[47], in_key[55], in_key[63], in_key[36], in_key[44], in_key[52],in_key[60],
        in_key[3], in_key[11], in_key[19], in_key[27], in_key[35], in_key[43], in_key[51],in_key[59],
        in_key[2], in_key[10], in_key[18], in_key[26], in_key[34], in_key[42], in_key[50],in_key[58],
        in_key[1], in_key[9], in_key[17], in_key[25], in_key[33], in_key[41], in_key[49],in_key[57]};
    end
   endfunction

   //round key permutation which converts 56 bit shifted input to 48 bit round key
   function [48:1] pc2(input [56:1] CiDi);
    begin
        pc2[1]=CiDi[14];
        pc2[2]=CiDi[17];
        pc2[3]=CiDi[11];
        pc2[4]=CiDi[24];
        pc2[5]=CiDi[1];
        pc2[6]=CiDi[5];
        pc2[7]=CiDi[3];
        pc2[8]=CiDi[28];

        pc2[9]=CiDi[15];
        pc2[10]=CiDi[6];
        pc2[11]=CiDi[21];
        pc2[12]=CiDi[10];
        pc2[13]=CiDi[23];
        pc2[14]=CiDi[19];
        pc2[15]=CiDi[12];
        pc2[16]=CiDi[4];

        pc2[17]=CiDi[26];
        pc2[18]=CiDi[8];
        pc2[19]=CiDi[16];
        pc2[20]=CiDi[7];
        pc2[21]=CiDi[27];
        pc2[22]=CiDi[20];
        pc2[23]=CiDi[13];
        pc2[24]=CiDi[2];

        pc2[25]=CiDi[41];
        pc2[26]=CiDi[52];
        pc2[27]=CiDi[31];
        pc2[28]=CiDi[37];
        pc2[29]=CiDi[47];
        pc2[30]=CiDi[55];
        pc2[31]=CiDi[30];
        pc2[32]=CiDi[40];

        pc2[33]=CiDi[51];
        pc2[34]=CiDi[45];
        pc2[35]=CiDi[33];
        pc2[36]=CiDi[48];
        pc2[37]=CiDi[44];
        pc2[38]=CiDi[49];
        pc2[39]=CiDi[39];
        pc2[40]=CiDi[56];

        pc2[41]=CiDi[34];
        pc2[42]=CiDi[53];
        pc2[43]=CiDi[46];
        pc2[44]=CiDi[42];
        pc2[45]=CiDi[50];
        pc2[46]=CiDi[36];
        pc2[47]=CiDi[29];
        pc2[48]=CiDi[32]; 

    end
   endfunction

   //left shifts
   function [56:1] cidi(input [28:1] c_prev, d_prev, input integer i);
   integer lshift [1:16];
   begin
    lshift[1]=1;
    lshift[2]=1;
    lshift[3]=2;
    lshift[4]=2;
    lshift[5]=2;
    lshift[6]=2;
    lshift[7]=2;
    lshift[8]=2;
    lshift[9]=1;
    lshift[10]=2;
    lshift[11]=2;
    lshift[12]=2;
    lshift[13]=2;
    lshift[14]=2;
    lshift[15]=2;
    lshift[16]=1;

    if(lshift[i]=='d1)
    cidi={c_prev[27:1], c_prev[28], d_prev[27:1], d_prev[28]};
    else if(lshift[i]=='d2)
    cidi={c_prev[26:1], c_prev[28:27], d_prev[26:1], d_prev[28:27]};
   end
   endfunction

   //behavioral block 
   reg [56:1] temp; //to store the value of the PC1 function
   reg [28:1] c[16:0], d[16:0];
   reg [48:1] rk[1:16]; //16 round keys
   integer i;
   always @(in_key)
   begin
    temp=pc1(in_key);
    c[0]=temp[56:29];
    d[0]=temp[28:1];
    for(i=1; i<=16; i=i+1)
    begin
        {c[i], d[i]}=cidi(c[i-1], d[i-1], i);
        rk[i]=pc2({c[i],d[i]});
    end
    key1=rk[1];
    key2=rk[2];
    key3=rk[3];
    key4=rk[4];
    key5=rk[5];
    key6=rk[6];
    key7=rk[7];
    key8=rk[8];
    key9=rk[9];
    key10=rk[10];
    key11=rk[11];
    key12=rk[12];
    key13=rk[13];
    key14=rk[14];
    key15=rk[15];
    key16=rk[16];
   end
  
endmodule
